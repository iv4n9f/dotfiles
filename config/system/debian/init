#!/usr/bin/env bash
set -euo pipefail

# ===== UI helpers =====
BOLD="\033[1m"; RESET="\033[0m"
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; CYAN="\033[36m"
info()  { printf "%b\n" "${BOLD}${CYAN}INFO\t:\t${RESET}%s" "$*"; }
ok()    { printf "%b\n" "${BOLD}${GREEN}OK\t:\t${RESET}%s"   "$*"; }
warn()  { printf "%b\n" "${BOLD}${YELLOW}WARN\t:\t${RESET}%s" "$*"; }
error() { printf "%b\n" "${BOLD}${RED}ERROR\t:\t${RESET}%s"  "$*"; }
rule()  { printf "%s\n" "---------------------------------------------------------------------"; }
die()   { error "$*"; exit 1; }
run() {
  local msg="$1"; shift
  info "$msg"
  if ! "$@" > /dev/null 2>&1; then
    error "Failed: $msg"
    return 1
  fi
  ok "$msg"
}

# ===== Args =====
DIR="${1:-$PWD}"
[ -d "$DIR" ] || die "Directorio inválido: $DIR"

# ===== Update system =====
rule
run "Updating APT package index" sudo apt-get update -qq
run "Upgrading system packages" sudo apt-get dist-upgrade -y -o Dpkg::Options::="--force-confnew"
run "Removing unused packages" sudo apt-get autoremove -y
rule

# ===== Packages (Debian/Ubuntu) =====
# NOTA: usa 'xorg' y 'xinit' en Debian/Ubuntu. No 'xorg-server'/'xorg-xinit'.
packages=(
  libxcb-xinerama0-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-keysyms1-dev libxcb-shape0-dev
  polybar rofi jq gnome-terminal xclip dconf-cli bat
  xorg xinit lightdm lightdm-gtk-greeter
  fonts-hack-ttf gnome-themes-extra zsh
  git build-essential curl wget unzip dos2unix
  cmake meson ninja-build pkg-config python3-sphinx
  libxext-dev libxcb1-dev libxcb-composite0-dev libxcb-image0-dev libxcb-xkb-dev
  libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev
  libjsoncpp-dev libmpdclient-dev libcurl4-openssl-dev libuv1-dev
  libxcb-damage0-dev libxcb-xfixes0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-present-dev
  libpixman-1-dev libdbus-1-dev libconfig-dev
  libgl1-mesa-dev libpcre2-dev libevdev-dev uthash-dev libev-dev
  x11-xserver-utils
  bspwm sxhkd
  zsh-autosuggestions zsh-syntax-highlighting
)

rule
run "Installing required packages (build deps included)" sudo apt-get install -y "${packages[@]}"
rule

# ===== Rofi Themes =====
run "Cloning rofi themes" bash -c '
  set -e
  tmpdir=$(mktemp -d)
  trap "rm -rf \"$tmpdir\"" EXIT
  cd "$tmpdir"
  git clone --depth=1 https://github.com/lr-tech/rofi-themes-collection.git
  mkdir -p "$HOME/.local/share/rofi/themes/"
  cp -r rofi-themes-collection/themes/* "$HOME/.local/share/rofi/themes/"
'

# ===== Configure LightDM =====
run "Configuring LightDM greeter" sudo cp "$DIR/../shared/utils/lightdm-gtk-greeter.conf" /etc/lightdm/lightdm-gtk-greeter.conf

# ===== Creating folders =====
rule
run "Creating XDG-like folders" bash -c 'mkdir -p "$HOME"/{Pictures,Downloads,Documents,Videos,Music,Projects,Repositories,Software,Credentials,Templates,Public,Desktop}'
rule

# ===== Install Hack Nerd Font =====
NF_VER="v3.2.1"
run "Installing Hack Nerd Font ${NF_VER}" bash -c '
  set -e
  cd "$HOME/Downloads"
  wget -q "https://github.com/ryanoasis/nerd-fonts/releases/download/'"$NF_VER"'/Hack.zip"
  unzip -qq Hack.zip -d hack-fonts
  sudo mkdir -p /usr/share/fonts/truetype/hack
  sudo cp -r hack-fonts/*.ttf /usr/share/fonts/truetype/hack/
  sudo fc-cache -f >/dev/null 2>&1 || true
  rm -rf Hack.zip hack-fonts
'
cd "$DIR"

# ===== Copy config files =====
rule
info "Copying configuration files"

run "bspwm configs" bash -c '
  cp -r "'"$DIR"'/../shared/bspwm" "$HOME/.config/bspwm"
  chmod +x "$HOME/.config/bspwm/bspwmrc" || true
'

run "sxhkd configs" bash -c '
  cp -r "'"$DIR"'/../shared/sxhkd" "$HOME/.config/sxhkd"
'

run "zsh config" bash -c '
  cp -r "'"$DIR"'/../shared/utils/zshrc" "$HOME/.zshrc"
'

run "polybar configs" bash -c '
  cp -r "'"$DIR"'/../shared/polybar" "$HOME/.config/polybar"
  chmod +x "$HOME/.config/polybar/launch.sh" || true
  chmod +x "$HOME/.config/polybar/modules/"* || true
'

run "wallpaper" bash -c '
  mkdir -p "$HOME/Pictures"
  cp -r "'"$DIR"'/../shared/imgs/wallpaper.jpg" "$HOME/Pictures/wallpaper.jpg"
'

run "xinitrc" bash -c '
  printf "exec bspwm\n" > "$HOME/.xinitrc"
  chmod +x "$HOME/.xinitrc" || true
'
rule

# ===== Shell and Display Manager =====
run "Setting zsh as default shell" chsh -s "$(command -v zsh)" || warn "Could not change shell (non-interactive?)"

# Habilitar DM solo si systemd está presente y no es chroot
if command -v systemctl >/dev/null 2>&1 && [ -d /run/systemd/system ]; then
  run "Enabling lightdm.service" sudo systemctl enable lightdm.service || warn "Could not enable lightdm.service"
  run "Starting lightdm.service" sudo systemctl start lightdm.service || warn "Could not start lightdm.service"
else
  warn "Systemd no disponible. Omite enable/start de lightdm."
fi
rule

ok "Setup completo"

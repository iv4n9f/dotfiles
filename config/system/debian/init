#!/usr/bin/env bash
set -euo pipefail

# ===== UI helpers =====
BOLD="\033[1m"; RESET="\033[0m"
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; CYAN="\033[36m"

info()  { printf "%b\n" "${BOLD}${CYAN}INFO\t:\t${RESET}$*"; }
ok()    { printf "%b\n" "${BOLD}${GREEN}OK\t:\t${RESET}$*"; }
warn()  { printf "%b\n" "${BOLD}${YELLOW}WARN\t:\t${RESET}$*"; }
error() { printf "%b\n" "${BOLD}${RED}ERROR\t:\t${RESET}$*"; }
rule()  { printf "%s\n" "---------------------------------------------------------------------"; }
die()   { error "$*"; exit 1; }

# Run commands with clear error messages
run() {
  local msg="$1"; shift
  info "$msg"
  if ! "$@"; then
    error "Failed: $msg"
    return 1
  fi
  ok "$msg"
}

# ===== Args =====
[[ $# -ge 1 ]] || die "Missing argument: base path 'dir'. Usage: $0 /path/to/dir"
dir="$(readlink -f "$1")"
[[ -d "$dir" ]] || die "Directory does not exist: $dir"

# ===== Root check =====
if [[ "$(id -u)" -eq 0 ]]; then
  die "Do not run this script as root. Use a normal user with sudo privileges."
fi

# ===== Debian-like check (APT) =====
if [[ -f /etc/os-release ]]; then
  # shellcheck disable=SC1091
  . /etc/os-release
  case "${ID:-}" in
    debian|ubuntu|kali|linuxmint|pop) : ;;
    *) die "Unsupported OS for APT: ${ID:-unknown}" ;;
  esac
else
  die "Cannot read /etc/os-release"
fi

# ===== Pre-reqs =====
command -v sudo >/dev/null 2>&1 || die "sudo is not installed"
export DEBIAN_FRONTEND=noninteractive

# ===== Upgrade system =====
rule
run "Updating APT package index" sudo apt-get update -y -qq
run "Upgrading system packages" sudo apt-get dist-upgrade -y -o Dpkg::Options::="--force-confnew"
run "Removing unused packages" sudo apt-get autoremove -y
rule

# ===== Install packages =====
packages=(
  git build-essential curl wget unzip dos2unix
  bspwm sxhkd polybar feh rofi jq
  gnome-terminal xclip dconf-cli bat nitrogen
  xorg picom lightdm lightdm-gtk-greeter
  fonts-hack-ttf gnome-themes-extra zsh
)
rule
run "Installing required packages" sudo apt-get install -y "${packages[@]}"
rule

# ===== Copy config files =====
rule
info "Copying configuration files"

# BSPWM
if [[ -d "$dir/../shared/bspwm" ]]; then
  find "$dir/../shared/bspwm" -type f -name "*.sh" -exec chmod +x {} +
  install -d "$HOME/.config/bspwm"
  cp -r "$dir/../shared/bspwm/." "$HOME/.config/bspwm/" || die "Copying bspwm configs"
  ok "bspwm configs copied"
else
  warn "Missing $dir/../shared/bspwm"
fi

# SXHKD
if [[ -d "$dir/../shared/sxhkd" ]]; then
  install -d "$HOME/.config/sxhkd"
  cp -r "$dir/../shared/sxhkd/." "$HOME/.config/sxhkd/" || die "Copying sxhkd configs"
  ok "sxhkd configs copied"
else
  warn "Missing $dir/../shared/sxhkd"
fi

# Polybar
if [[ -d "$dir/../shared/polybar" ]]; then
  chmod +x "$dir/../shared/polybar/launch.sh" || true
  find "$dir/../shared/polybar/modules" -type f -exec chmod +x {} + 2>/dev/null || true
  install -d "$HOME/.config/polybar"
  cp -r "$dir/../shared/polybar/." "$HOME/.config/polybar/" || die "Copying polybar configs"
  ok "polybar configs copied"
else
  warn "Missing $dir/../shared/polybar"
fi

# Xinit and Picom
if [[ -f /etc/X11/xinit/xinitrc ]]; then
  cp /etc/X11/xinit/xinitrc "$HOME/.xinitrc" || warn "Could not copy xinitrc"
fi
printf "exec bspwm\n" > "$HOME/.xinitrc" || die "Writing ~/.xinitrc"
chmod +x "$HOME/.xinitrc" || true

if [[ -d "$dir/../shared/picom" ]]; then
  install -d "$HOME/.config/picom"
  cp -r "$dir/../shared/picom/." "$HOME/.config/picom/" || die "Copying picom configs"
  ok "picom configs copied"
else
  warn "Missing $dir/../shared/picom"
fi
rule

# ===== Nerd Fonts: Hack =====
rule
tmpdir="$(mktemp -d)"
cleanup_fonts() { rm -rf "$tmpdir"; }
trap cleanup_fonts EXIT

run "Downloading Hack Nerd Font" bash -c 'cd "'"$tmpdir"'" && wget -q https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip'
run "Unzipping Hack font" bash -c 'cd "'"$tmpdir"'" && unzip -qq Hack.zip -d hack-fonts'
run "Installing Hack font" sudo bash -c 'install -d /usr/share/fonts/truetype/hack && cp "'"$tmpdir"'/hack-fonts/"*.ttf" /usr/share/fonts/truetype/hack/'
run "Refreshing font cache" sudo fc-cache -f >/dev/null
rule

# ===== Rofi themes =====
rule
rtmp="$(mktemp -d)"
trap 'rm -rf "$rtmp"; cleanup_fonts' EXIT
run "Cloning rofi-themes-collection" git clone --depth=1 https://github.com/lr-tech/rofi-themes-collection.git "$rtmp/rofi"
run "Installing rofi themes" bash -c 'install -d "$HOME/.local/share/rofi/themes" && cp -r "'"$rtmp/rofi/themes/"'* "$HOME/.local/share/rofi/themes/"'
# lightdm greeter
if [[ -f "$dir/../shared/utils/lightdm-gtk-greeter.conf" ]]; then
  run "Installing lightdm-gtk-greeter.conf" sudo cp "$dir/../shared/utils/lightdm-gtk-greeter.conf" /etc/lightdm/lightdm-gtk-greeter.conf
else
  warn "Missing lightdm-gtk-greeter.conf"
fi
# images
if [[ -d "$dir/../shared/img" ]]; then
  cp -r "$dir/../shared/img" "$HOME/" || warn "Copying images"
fi
rule

# ===== Zsh default shell =====
rule
if command -v zsh >/dev/null 2>&1; then
  if chsh -s /usr/bin/zsh "$USER"; then
    ok "Default shell changed to zsh (applies next login)"
  else
    warn "Could not change default shell. Do it manually: chsh -s /usr/bin/zsh"
  fi
  if [[ -f "$dir/../shared/utils/alias" ]]; then
    cat "$dir/../shared/utils/alias" >> "$HOME/.zshrc" || warn "Could not append aliases to .zshrc"
    ok "Aliases added to .zshrc"
  else
    warn "Missing alias file"
  fi
else
  warn "zsh is not available"
fi
rule

# ===== Scripts: format + PATH =====
rule
shopt -s nullglob
utils_bin=( "$dir/../shared/utils/bin/"* )
if (( ${#utils_bin[@]} )); then
  run "Normalizing line endings (dos2unix)" dos2unix "${utils_bin[@]}"
  run "Installing scripts to /usr/local/bin" sudo install -m 755 "${utils_bin[@]}" -t /usr/local/bin/
  if [[ -f /usr/local/bin/set_target ]]; then
    run "Setting permissions for set_target" sudo chmod 775 /usr/local/bin/set_target
  else
    warn "set_target not found after install"
  fi
else
  warn "No scripts found in $dir/../shared/utils/bin/"
fi
rule

# ===== Apply GNOME Terminal config and set_target =====
rule
if command -v /usr/local/bin/set_target >/dev/null 2>&1; then
  if ! /usr/local/bin/set_target 8.8.8.8; then
    error "set_target failed with 8.8.8.8"
  else
    ok "set_target executed"
  fi
else
  warn "set_target not in PATH"
fi

if [[ -x "$dir/../shared/utils/gnome-terminal.sh" ]]; then
  chmod +x "$dir/../shared/utils/gnome-terminal.sh" || true
  if [[ -f "$dir/../shared/utils/gnome.conf" ]]; then
    if ! "$dir/../shared/utils/gnome-terminal.sh" "$dir/../shared/utils/gnome.conf"; then
      error "gnome-terminal.sh failed with gnome.conf"
    else
      ok "GNOME Terminal config applied"
    fi
  else
    warn "Missing gnome.conf"
  fi
else
  warn "Missing gnome-terminal.sh"
fi
rule

# ===== Done =====
ok "Installation completed. Please reboot the system to apply changes."
rule
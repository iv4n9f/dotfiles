#!/usr/bin/env bash
set -euo pipefail

# ===== UI helpers =====
BOLD="\033[1m"; RESET="\033[0m"
RED="\033[31m"; GREEN="\033[32m"; YELLOW="\033[33m"; CYAN="\033[36m"
info()  { printf "%b %s\n" "${BOLD}${CYAN}INFO\t:\t${RESET}"  "$*"; }
ok()    { printf "%b %s\n" "${BOLD}${GREEN}OK\t:\t${RESET}"   "$*"; }
warn()  { printf "%b %s\n" "${BOLD}${YELLOW}WARN\t:\t${RESET}" "$*"; }
error() { printf "%b %s\n" "${BOLD}${RED}ERROR\t:\t${RESET}"  "$*"; }
rule()  { printf "%s\n" "---------------------------------------------------------------------"; }
die()   { error "$*"; exit 1; }
run() {
  local msg="$1"; shift
  info "$msg"
  if ! "$@" > /dev/null 2>&1; then
    error "Failed: $msg"
    return 1
  fi
  ok "$msg"
}

# ===== Privilegios y entorno APT no interactivo =====
if [ "${EUID:-$(id -u)}" -eq 0 ]; then SUDO=""; else SUDO="sudo"; fi
export DEBIAN_FRONTEND=noninteractive
APT_OPTS=(-y -o Dpkg::Options::="--force-confnew" -o APT::Color="0")

# Usuario objetivo para usermod (evita cambiar el shell a root si vienes con sudo)
TARGET_USER="${SUDO_USER:-${USER}}"

# ===== Paths: repo root basado en este script =====
SCRIPT_DIR="$(cd -- "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
REPO_ROOT="$(cd -- "$SCRIPT_DIR/.." && pwd -P)"
DIR="${1:-$REPO_ROOT}"
[ -d "$DIR" ] || die "Directorio inválido: $DIR"

# ===== Update system =====
run "Updating APT package index"      $SUDO apt-get update -qq
run "Upgrading system packages"       $SUDO apt-get dist-upgrade "${APT_OPTS[@]}"
run "Removing unused packages"        $SUDO apt-get autoremove -y

# ===== Packages (Debian/Ubuntu) =====
packages=(
  libxcb-xinerama0-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-keysyms1-dev libxcb-shape0-dev
  polybar rofi jq gnome-terminal xclip dconf-cli bat
  xorg xinit lightdm lightdm-gtk-greeter
  fonts-hack-ttf gnome-themes-extra zsh
  git build-essential curl wget unzip dos2unix
  cmake meson ninja-build pkg-config python3-sphinx
  libxext-dev libxcb1-dev libxcb-composite0-dev libxcb-image0-dev libxcb-xkb-dev
  libxcb-xrm-dev libxcb-cursor-dev libasound2-dev libpulse-dev
  libjsoncpp-dev libmpdclient-dev libcurl4-openssl-dev libuv1-dev
  libxcb-damage0-dev libxcb-xfixes0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-present-dev
  libpixman-1-dev libdbus-1-dev libconfig-dev
  libgl1-mesa-dev libpcre2-dev libevdev-dev uthash-dev libev-dev
  x11-xserver-utils
  bspwm sxhkd
  zsh-autosuggestions zsh-syntax-highlighting
)
run "Installing required packages"    $SUDO apt-get install "${APT_OPTS[@]}" "${packages[@]}"

# ===== Rofi Themes =====
run "Cloning rofi themes" bash -c '
  set -e
  tmpdir=$(mktemp -d)
  trap "rm -rf \"$tmpdir\"" EXIT
  cd "$tmpdir"
  git clone --depth=1 https://github.com/lr-tech/rofi-themes-collection.git
  mkdir -p "$HOME/.local/share/rofi/themes/"
  cp -r rofi-themes-collection/themes/* "$HOME/.local/share/rofi/themes/"
'

# ===== Configure LightDM =====
run "Ensuring LightDM dirs"           $SUDO mkdir -p /etc/lightdm
run "Configuring LightDM greeter"     $SUDO cp "$DIR/shared/utils/lightdm-gtk-greeter.conf" /etc/lightdm/lightdm-gtk-greeter.conf

# ===== Creating folders =====
run "Creating XDG-like folders"       bash -c 'mkdir -p "$HOME"/{Pictures,Downloads,Documents,Videos,Music,Projects,Repositories,Software,Credentials,Templates,Public,Desktop}'

# ===== Install Hack Nerd Font =====
NF_VER="v3.2.1"
run "Installing Hack Nerd Font $NF_VER" bash -c '
  set -e
  mkdir -p "$HOME/Downloads"
  cd "$HOME/Downloads"
  wget -q "https://github.com/ryanoasis/nerd-fonts/releases/download/'"$NF_VER"'/Hack.zip"
  unzip -qq Hack.zip -d hack-fonts
  '"$SUDO"' mkdir -p /usr/share/fonts/truetype/hack
  '"$SUDO"' cp -r hack-fonts/*.ttf /usr/share/fonts/truetype/hack/
  '"$SUDO"' fc-cache -f >/dev/null 2>&1 || true
  rm -rf Hack.zip hack-fonts
'

# ===== Copy config files =====
run "Ensuring ~/.config tree"         bash -c 'mkdir -p "$HOME/.config" "$HOME/.config/polybar/modules" "$HOME/.config/bspwm" "$HOME/.config/sxhkd"'
run "Copy bspwm configs"              cp -r "$DIR/shared/bspwm/."  "$HOME/.config/bspwm/"
run "Copy sxhkd configs"              cp -r "$DIR/shared/sxhkd/."  "$HOME/.config/sxhkd/"
run "Copy zsh config"                 cp     "$DIR/shared/utils/zshrc" "$HOME/.zshrc"
run "Copy polybar configs"            bash -c '
  cp -r "'"$DIR"'/shared/polybar/." "$HOME/.config/polybar/"
  chmod +x "$HOME/.config/polybar/launch.sh" || true
  find "$HOME/.config/polybar/modules" -type f -print0 | xargs -0 -r chmod +x || true
'
run "Copy wallpaper"                  bash -c '
  mkdir -p "$HOME/Pictures"
  cp "'"$DIR"'/shared/imgs/wallpaper.jpg" "$HOME/Pictures/wallpaper.jpg"
'
run "Write .xinitrc"                  bash -c 'printf "exec bspwm\n" > "$HOME/.xinitrc"; chmod +x "$HOME/.xinitrc" || true'

# ===== Shell and Display Manager =====
# Cambiar shell sin prompt. Requiere root/sudo. Apunta al usuario real que lanzó el script.
ZSH_PATH="$(command -v zsh || true)"
if [ -n "$ZSH_PATH" ]; then
  run "Setting zsh as default shell for $TARGET_USER" $SUDO usermod -s "$ZSH_PATH" "$TARGET_USER" || warn "Could not change shell"
else
  warn "zsh no encontrado en PATH. Omite cambio de shell."
fi

# Evita fallos en contenedores/chroot
if command -v systemctl >/dev/null 2>&1 && [ -d /run/systemd/system ]; then
  run "Enabling lightdm.service"      $SUDO systemctl enable lightdm.service || warn "Could not enable lightdm.service"
  run "Starting lightdm.service"       $SUDO systemctl start  lightdm.service || warn "Could not start lightdm.service"
else
  warn "Systemd no disponible. Omite enable/start de lightdm."
fi

ok "Setup completo"
